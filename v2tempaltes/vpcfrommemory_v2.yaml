AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VpcName:
    Type: String
  VpcCidrBlock:
    Type: String
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PublicSubnetAName:
    Type: String
  PublicSubnetBName:
    Type: String 
  PrivateSubnetAName:
    Type: String
  PrivateSubnetBName:
    Type: String
  IGWName: 
    Type: String
  
Resources:
  TestEnvPrivateCloud:
    Type: AWS::EC2::VPC
    Properties:  
      CidrBlock: !Sub ${VpcCidrBlock}
      EnableDnsHostnames: True 
      EnableDnsSupport: True
      Tags: 
        - Key: Name
          Value: !Sub ${VpcName} 
        - Key: Environment
          Value: Test
  TestEnvIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${IGWName}
        - Key: Environment
          Value: Test
  IGWToVpcAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TestEnvPrivateCloud
      InternetGatewayId: !Ref TestEnvIGW
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt TestEnvPrivateCloud.CidrBlock, 4, 8 ] ]
      VpcId: !Ref TestEnvPrivateCloud
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags: 
        - Key: Name
          Value: !Sub ${PublicSubnetAName}
        - Key: Environment
          Value: Test
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt TestEnvPrivateCloud.CidrBlock, 4, 8 ] ]
      VpcId: !Ref TestEnvPrivateCloud
      MapPublicIpOnLaunch: True
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${PublicSubnetBName}
        - Key: Environment
          Value: Test 
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt TestEnvPrivateCloud.CidrBlock, 4, 8] ]
      VpcId: !Ref TestEnvPrivateCloud
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags: 
        - Key: Name
          Value: !Sub ${PrivateSubnetAName}
        - Key: Environment
          Value: Test
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt TestEnvPrivateCloud.CidrBlock, 4, 8 ] ]
      VpcId: !Ref TestEnvPrivateCloud
      MapPublicIpOnLaunch: False
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${PrivateSubnetBName}
        - Key: Environment
          Value: Test
  PublicRouteTable: 
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TestEnvPrivateCloud
      Tags:
        - Key: Environment
          Value: Test
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: PublicRouteTable
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref TestEnvIGW
      DestinationCidrBlock: 0.0.0.0/0
  RouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA 
  RouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  
  
  

