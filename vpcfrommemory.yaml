AWSTemplateFormatVersion: 2010-09-09
Resources:
  # Virtual Private Cloud(VPC)  
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name 
          Value: !Join ['', [!Ref "AWS::StackName", "-VPC"]]
        - Key: Environment
          Value: Test Environment
  # Internet Gateway(IGW)  
  PortalToTheInternet:
    Type: AWS::EC2::InternetGateway
    # This is my portal to the WWW
    DependsOn: MyVPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref PortalToTheInternet

  # Subnets: Public and Private, One Public and Private in each AZ
  # Note that !Join and !Sub work almost exactly the same. !Join however allows for the insertion of a 
  # a delimiting character whereas !Sub takes the same info as !Join but without the need to use the !Ref func.
  
  ChrisPublicSubnetA:
    # Public Subnet 1
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.1.10.0/24
      MapPublicIpOnLaunch: true 
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicSubnetA
      - Key: Environment
        Value: Test Environment

  ChrisPublicSubnetB:
    #Public Subnet 2
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.1.20.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags: 
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicSubnetB
      - Key: Environment
        Value: Test Environment
  
  ChrisPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.1.30.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivateSubnetA
      - Key: Environment
        Value: Test Environment
    
  ChrisPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 192.1.40.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PrivateSubnetB
      - Key: Environment
        Value: Test Environment

  # Route table for subnets, public routes.
  RouteTableForSubnets:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyVPC
      Tags: 
      - Key: Name
        Value: !Sub PublicRouteTable-${AWS::StackName}
      - Key: Environment
        Value: Test Environment
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTableForSubnets
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref PortalToTheInternet
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ChrisPublicSubnetA
      RouteTableId: !Ref RouteTableForSubnets
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ChrisPublicSubnetB
      RouteTableId: !Ref RouteTableForSubnets

  # Defining security groups for instances to be deployed into
  SecurityGroupA:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub SecurityGroupA-${MyVPC}
      GroupDescription: "Security Group created from CF template"
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: SecurityGroupA
  SecurityGroupB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub SecurityGroupB-${MyVPC}
      GroupDescription: "Security Group created from CF template"
      VpcId: !Ref MyVPC
      Tags:
      - Key: Name
        Value: SecurityGroupB
  
  
  # Defining exports to be referenced in other templates later on.
Outputs:
  StackId:
    Description: Exporting stack name for X-template refs 
    Value: AWS::StackName
    Export:
      Name: VpcStackName
  SharedVpcId:
    Description: Shared Services VPC
    Value: !Ref MyVPC
    Export:
      Name: !Sub "SharedVpcId-${AWS::StackName}"
  PublicSubnetA:
    Description: Public subnet in AZ-1 in US-West-2
    Value: !Ref ChrisPublicSubnetA
    Export: 
      Name: !Sub "PublicSubnetA-${AWS::StackName}"
  PublicSubnetB:
    Description: Public subnet in AZ-2 in US-West-2
    Value: !Ref ChrisPublicSubnetB
    Export: 
      Name: !Sub "PublicSubnetB-${AWS::StackName}"
  PrivateSubnetA:
    Description: Public subnet in AZ-1 in US-West-2
    Value: !Ref ChrisPrivateSubnetA
    Export: 
      Name: !Sub "PrivateSubnetA-${AWS::StackName}"
  PrivateSubnetB:
    Description: Public subnet in AZ-1 in US-West-2
    Value: !Ref ChrisPrivateSubnetB
    Export: 
      Name: !Sub "PrivateSubnetB-${AWS::StackName}"
  SecurityGroupA:
    Description: SG-A in AZ-1
    Value: !Ref SecurityGroupA
    Export:
      Name: !Sub SG-A-${AWS::StackName}
  SecurityGroupB:
    Description: SG-B in AZ-2
    Value: !Ref SecurityGroupB
    Export:
      Name: !Sub SG-B-${AWS::StackName}